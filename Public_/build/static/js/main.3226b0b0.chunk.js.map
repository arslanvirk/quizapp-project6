{"version":3,"sources":["Components/QuestionCard.tsx","firebase.js","Services/QuizAPI.ts","App.tsx","index.tsx","SwRegister.js"],"names":["QuestionCard","question","options","callBackSubmitFunc","useState","selectedAns","setSelectedAns","onSelectionHandler","e","target","value","className","dangerouslySetInnerHTML","__html","onSubmit","map","option","index","key","name","type","onChange","checked","required","firebase","initializeApp","apiKey","authDomain","projectId","messagingSenderId","appId","messaging","Difficulty","getQuizData","TotalQuestions","level","a","endpoint","fetch","apiRespose","json","results","quizData","questionData","correct","correct_answer","array","incorrect_answers","sort","Math","random","App","quiz","setQuiz","currentStep","SetcurrentStep","score","setScore","loading","setLoading","showResult","setShowResult","quizOver","setQuizOver","startQuiz","EASY","localStorage","setItem","JSON","stringify","qdata","getItem","qlist","parse","undefined","length","onClick","Notification","requestPermission","then","getToken","token","alert","catch","err","console","log","userAnswer","preventDefault","ReactDOM","render","StrictMode","document","getElementById","navigator","window","addEventListener","swPath","process","serviceWorker","register","registration","scope"],"mappings":"4RAGaA,G,MAA2C,SAAC,GAA+C,IAA7CC,EAA4C,EAA5CA,SAAUC,EAAkC,EAAlCA,QAASC,EAAyB,EAAzBA,mBAAyB,EAE7DC,mBAAS,IAFoD,mBAE5FC,EAF4F,KAE/EC,EAF+E,KAG7FC,EAAqB,SAACC,GACxBF,EAAeE,EAAEC,OAAOC,QAG5B,OACI,yBAAKC,UAAU,QACX,yBAAKA,UAAU,SACX,uBAAGC,wBAAyB,CAAEC,OAAQZ,MAE1C,0BAAMa,SAAU,SAACN,GAAD,OAAOL,EAAmBK,EAAGH,KAErCH,EAAQa,KAAI,SAACC,EAAgBC,GACzB,OACI,yBAAKC,IAAKD,GACN,2BAAON,UAAU,SACb,2BAAOD,MAAOM,EAAQG,KAAK,SAASC,KAAK,QACrCC,SAAUd,EACVe,QAASjB,IAAgBW,EACzBO,UAAQ,IAEZ,0BAAMX,wBAAyB,CAAEC,OAAQG,UAK7D,6BACA,6BACA,yBAAKL,UAAU,YACX,4BACIA,UAAU,cAEV,8C,iBCvBxBa,IAASC,cAVY,CACjBC,OAAQ,0CACRC,WAAY,4CAEZC,UAAW,4BAEXC,kBAAmB,eACnBC,MAAO,8CAIX,IAAMC,EAAYP,IAASO,Y,ICEfC,E,QAdCC,EAAW,uCAAG,WAAOC,EAAwBC,GAA/B,uBAAAC,EAAA,6DACjBC,EADiB,6CACgCH,EADhC,mCACyEC,EADzE,2BAEEG,MAAMD,GAFR,cAEjBE,EAFiB,gBAGCA,EAAWC,OAHZ,uBAGjBC,EAHiB,EAGjBA,QACAC,EAAmBD,EAAQ1B,KAAI,SAAC4B,GAClC,MAAO,CACH1C,SAAU0C,EAAa1C,SACvB2C,QAASD,EAAaE,eACtB3C,SAXU4C,EAWY,CAACH,EAAaE,gBAAf,mBAAkCF,EAAaI,oBAV5E,YAAID,GAAOE,MAAK,kBAAMC,KAAKC,SAAW,QADrB,IAACJ,KAGK,kBAWhBJ,GAXgB,4CAAH,yD,SAcZV,K,YAAAA,E,gBAAAA,E,aAAAA,M,KC2EGmB,MArFf,WACE,IADa,EAEW/C,mBAAiB,IAF5B,mBAENgD,EAFM,KAEAC,EAFA,OAGyBjD,mBAAS,GAHlC,mBAGNkD,EAHM,KAGOC,EAHP,OAIanD,mBAAS,GAJtB,mBAINoD,EAJM,KAICC,EAJD,OAKerD,oBAAS,GALxB,mBAKRsD,EALQ,KAKCC,EALD,OAMqBvD,oBAAS,GAN9B,mBAMRwD,EANQ,KAMIC,EANJ,OAQmBzD,oBAAS,GAR5B,mBAQN0D,EARM,KAQIC,EARJ,KAyBPC,EAAS,uCAAG,gCAAA5B,EAAA,6DAChB2B,GAAY,GACZJ,GAAW,GACPhB,EAAuB,GAHX,kBAKOV,EA7BM,EA6BsBD,EAAWiC,MAL9C,OAKdtB,EALc,OAMduB,aAAaC,QAAQ,QAASC,KAAKC,UAAU1B,IAN/B,kDASR2B,EAAQJ,aAAaK,QAAQ,SAC7BC,EAAkB,OAAVF,EAAiB,GAAKA,EACpC3B,EAAeyB,KAAKK,MAAMD,GAXZ,QAahBnB,EAAQ,IACRA,EAAQV,GACRY,EAAe,GACfE,EAAS,GACTI,GAAc,GACdF,GAAW,GAlBK,0DAAH,qDAqBf,OACE,yBAAKhD,UAAU,OACb,yBAAKA,UAAU,aACb,yCAEDiD,GAAcE,EACb,yBAAKnD,UAAWiD,EAAa,2CAAwCc,GAClEd,EACC,8BACE,sCACA,uBAAGjD,UAAU,eAAb,qBAEG,+BAAK6C,GAFR,WAE0B,2BAAIJ,EAAKuB,SAJrC,KAKkB,KAEpB,4BAAQhE,UAAU,QAAQiE,QACxB,WACEZ,MAFJ,mBFlDNa,aAAaC,oBAAoBC,MAAK,WAClC,OAAOhD,EAAUiD,cAClBD,MAAK,SAACE,GACLC,MAAMD,MACPE,OAAM,SAACC,GACNC,QAAQC,IAAI,6CAA8CF,OEoDhD,KACX1B,EACC,sCAEQ,KACRA,GAAYI,EAMC,KALb,yBAAKnD,UAAU,QACb,kBAAC,EAAD,CACEV,SAAUmD,EAAKE,GAAarD,SAC5BC,QAASkD,EAAKE,GAAapD,QAC3BC,mBArEc,SAACK,EAAiC+E,GACxD/E,EAAEgF,iBAEED,IADiBnC,EAAKE,GACMV,SAC9Ba,EAASD,EAAQ,GAGfF,IAAgBF,EAAKuB,OAAS,EAChCpB,EAAeD,EAAc,IAG7BO,GAAc,GACdE,GAAY,UCtBlB0B,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SCRlB,kBAAmBC,WACnBC,OAAOC,iBAAiB,QAAQ,WAC5B,IAAIC,EAAM,UAAMC,GAAN,UACVJ,UAAUK,cAAcC,SAASH,GAAQlB,MAAK,SAAUsB,GAEpDhB,QAAQC,IAAI,qDAAsDe,EAAaC,UAChF,SAAUlB,GAETC,QAAQC,IAAI,sCAAuCF,W","file":"static/js/main.3226b0b0.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport \"../App.css\";\r\n\r\nexport const QuestionCard: React.FC<QuestionPropType> = ({ question, options, callBackSubmitFunc }) => {\r\n\r\n    const [selectedAns, setSelectedAns] = useState(\"\");\r\n    const onSelectionHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setSelectedAns(e.target.value);\r\n    }\r\n\r\n    return (\r\n        <div className=\"Card\">\r\n            <div className=\"Parag\">\r\n                <p dangerouslySetInnerHTML={{ __html: question }} />\r\n            </div>\r\n            <form onSubmit={(e) => callBackSubmitFunc(e, selectedAns)}>\r\n                {\r\n                    options.map((option: string, index: number) => {\r\n                        return (\r\n                            <div key={index}>\r\n                                <label className=\"radio\">\r\n                                    <input value={option} name=\"option\" type=\"radio\"\r\n                                        onChange={onSelectionHandler}\r\n                                        checked={selectedAns === option}\r\n                                        required\r\n                                    />\r\n                                    <span dangerouslySetInnerHTML={{ __html: option }} />\r\n                                </label>\r\n                            </div>);\r\n                    })\r\n                }\r\n                <br />\r\n                <br />\r\n                <div className=\"sub-main\">\r\n                    <button\r\n                        className=\"button-two\"\r\n                    >\r\n                        <span>Submit</span>\r\n                    </button>\r\n                </div>\r\n            </form>\r\n\r\n        </div>\r\n    );\r\n}\r\n","// Firebase(the core Firebase SDK) is always required and must be listed first\r\nimport firebase from \"firebase\";\r\n\r\n// Your web app's Firebase configuration\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyB7cyKN_ue9390iqtlHWN2t1p9g_BfxMwQ\",\r\n    authDomain: \"quizapp-push-notification.firebaseapp.com\",\r\n    // databaseURL: \"https://fir-push-notification1.firebaseio.com\",\r\n    projectId: \"quizapp-push-notification\",\r\n    // storageBucket: \"fir-push-notification1.appspot.com\",\r\n    messagingSenderId: \"122159620785\",\r\n    appId: \"1:122159620785:web:85d357d087db8973b5b890\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\nconst messaging = firebase.messaging();\r\n\r\nexport function initNotification() {\r\n    Notification.requestPermission().then(() => {\r\n        return messaging.getToken()\r\n    }).then((token) => {\r\n        alert(token);\r\n    }).catch((err) => {\r\n        console.log('An error occurred while retrieving token. ', err);\r\n    });\r\n}","const shuffleArray = (array: any[]) => \r\n    [...array].sort(() => Math.random() - 0.5);\r\n\r\nexport const getQuizData = async (TotalQuestions: number, level: Difficulty): Promise<Quiz[]> => {\r\n    const endpoint = `https://opentdb.com/api.php?amount=${TotalQuestions}&category=18&difficulty=${level}&type=multiple`;\r\n    const apiRespose = await fetch(endpoint);\r\n    let { results } = await apiRespose.json();\r\n    const quizData: Quiz[] = results.map((questionData: QuestionType) => {\r\n        return {\r\n            question: questionData.question,\r\n            correct: questionData.correct_answer,\r\n            options: shuffleArray([questionData.correct_answer, ...questionData.incorrect_answers])\r\n        }\r\n    });\r\n    return quizData;\r\n}\r\n\r\nexport enum Difficulty {\r\n    EASY = \"easy\",\r\n    MEDIUM = \"medium\",\r\n    HARD = \"hard\"\r\n};","import { exception } from 'console';\r\nimport React, { useState } from 'react';\r\nimport './App.css';\r\nimport { QuestionCard } from './Components/QuestionCard';\r\nimport { initNotification } from './firebase';\r\nimport { Difficulty, getQuizData } from './Services/QuizAPI';\r\n\r\nfunction App() {\r\n  const totalQuestions: number = 5;\r\n  const [quiz, setQuiz] = useState<Quiz[]>([]);\r\n  const [currentStep, SetcurrentStep] = useState(0);\r\n  const [score, setScore] = useState(0);\r\n  let [loading, setLoading] = useState(false);\r\n  let [showResult, setShowResult] = useState(false);\r\n  // let [startQuiz, setstartQuiz] = useState(false);\r\n  const [quizOver, setQuizOver] = useState(true);\r\n  const onSubmitHandler = (e: React.FormEvent<EventTarget>, userAnswer: string) => {\r\n    e.preventDefault();\r\n    const questionData = quiz[currentStep];\r\n    if (userAnswer === questionData.correct) {\r\n      setScore(score + 1);\r\n    }\r\n\r\n    if (currentStep !== quiz.length - 1) {\r\n      SetcurrentStep(currentStep + 1);\r\n    }\r\n    else {\r\n      setShowResult(true);\r\n      setQuizOver(true);\r\n    }\r\n  }\r\n\r\n  const startQuiz = async () => {\r\n    setQuizOver(false);\r\n    setLoading(true);\r\n    let questionData: Quiz[] = [];\r\n    try {\r\n      questionData = await getQuizData(totalQuestions, Difficulty.EASY);\r\n      localStorage.setItem(\"qlist\", JSON.stringify(questionData));\r\n    } catch (error) {\r\n      //console.log(\"internet not connected\");\r\n      const qdata = localStorage.getItem(\"qlist\");\r\n      const qlist = qdata === null ? \"\" : qdata;\r\n      questionData = JSON.parse(qlist);\r\n    }\r\n    setQuiz([]);\r\n    setQuiz(questionData);\r\n    SetcurrentStep(0);\r\n    setScore(0);\r\n    setShowResult(false);\r\n    setLoading(false);\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"container\">\r\n        <h1>Quiz App</h1>\r\n      </div>\r\n      {showResult || quizOver ? (\r\n        <div className={showResult ? \"question-container result-container\" : undefined}>\r\n          {showResult ? (\r\n            <span>\r\n              <h2>Result</h2>\r\n              <p className=\"result-text\">\r\n                You final score is\r\n                 <b> {score}</b> out of <b>{quiz.length}</b>\r\n              </p> </span>) : null}\r\n\r\n          <button className='start' onClick={\r\n            () => {\r\n              startQuiz();\r\n            }}>\r\n            Begin Quiz\r\n            </button> \r\n          { initNotification()}\r\n        </div>) : null}\r\n      {loading ? (\r\n        <p>\r\n          Loading\r\n        </p>) : null}\r\n      {!loading && !quizOver ?\r\n        <div className=\"Quiz\">\r\n          <QuestionCard\r\n            question={quiz[currentStep].question}\r\n            options={quiz[currentStep].options}\r\n            callBackSubmitFunc={onSubmitHandler}\r\n          /></div> : null\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport SwRegister from './SwRegister';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nSwRegister();\r\n","export default function SwRegister() {\r\n    // Register a service worker\r\n    if ('serviceWorker' in navigator) {\r\n        window.addEventListener('load', function () {\r\n            let swPath = `${process.env.PUBLIC_URL}/sw.js`  //Get Server Worker File from Public\r\n            navigator.serviceWorker.register(swPath).then(function (registration) {\r\n                // Registration was successful\r\n                console.log('ServiceWorker registration successful with scope: ', registration.scope);\r\n            }, function (err) {\r\n                // registration failed :(\r\n                console.log('ServiceWorker registration failed: ', err);\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n  "],"sourceRoot":""}